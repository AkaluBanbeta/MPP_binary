
#Analysis based on the modified power prior with depeendent power(DMPP)


#Data generation
source("../Data_preparation.R")


#Functions for computing the DMPP
source("../LogL_DMPP.R") 


#MCMC sampling 
init_Dep=rep(0.3,H+4)
result_MPP_Dep<-MCMCmetrop1R(LikelihoodMPP_Dep,theta.init=init_Dep,burnin =1*niter,mcmc =1*niter,verbose=0, thin = 1 ,V=0.0003*diag(length(init_Dep)),
                             success=success,H=H,n=n)
result_MPP_Dep<-MCMCmetrop1R(LikelihoodMPP_Dep,theta.init=result_MPP_Dep[nrow(result_MPP_Dep),],  burnin = 1*niter, mcmc =0.8*niter,verbose=0, thin = 1 ,V=0.3*cov(result_MPP_Dep[trunc(0.8*niter):trunc(1*niter),]),
                             success=success,H=H,n=n)
result_MPP_Dep<-MCMCmetrop1R(LikelihoodMPP_Dep,theta.init=result_MPP_Dep[nrow(result_MPP_Dep),],  burnin = 1*niter, mcmc =0.8*niter,verbose=0, thin = 1 ,V=0.22*cov(result_MPP_Dep[trunc(0.6*niter):trunc(0.8*niter),]),
                             success=success,H=H,n=n)
result_MPP_Dep<-MCMCmetrop1R(LikelihoodMPP_Dep,theta.init=result_MPP_Dep[nrow(result_MPP_Dep),],  burnin = 1*niter, mcmc =1*niter,verbose=0, thin = 5 ,V=0.2*cov(result_MPP_Dep[trunc(0.6*niter):trunc(0.8*niter),]),
                             success=success,H=H,n=n)
result_MPP_Dep<-as.mcmc(as.data.frame((result_MPP_Dep))) 
varnames(result_MPP_Dep)[1]<-"p"
for(i in 1:H){
  varnames(result_MPP_Dep)[i+1]<-paste0("weight",i)
}
varnames(result_MPP_Dep)[H+2]<-"a"
varnames(result_MPP_Dep)[H+3]<-"b"
varnames(result_MPP_Dep)[H+4]<-"delta"
summary(result_MPP_Dep)

